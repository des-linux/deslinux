#!/bin/sh

DESLBuilder(){
	# for Test
	[ "${1}" = '/Exit-Immediately' ] && exit 0;

	# Private: Core variables
	local SELF="${BASH_SOURCE:-${DESLB_SELF_PATH:-${0}}}";
	SELF=`readlink -f "${SELF}" || echo "${SELF}"`;
	local sRoot="${SELF%/*}";

	local sName="${SELF##*/}";
	local OFS=${IFS};
	local N='/dev/null';

	SetEnvVariables;

	[ "${DESLB_ENV_CHECKED:-0}" = '0' ] && {
		CheckAndBuildScriptEngine;
	}

	# 1st: [Exec, NoReturn] Run here in user shell (*sh)
	[ "${DESLB_RUN_AS_ROOT:-0}" = '0' ] && {
		# If 'unshare' is not supported, exit.
		CheckUnshareWithError || return ${?};
		ExecInDBSE "${@}";
		return ${?};
	}

	# 2nd: [Fork, Return] Run here in DBSE shell, real user
	#	if return code is 251, Re-run without FSV
	[ "${DESLB_ISOLATED_ENV:-0}" = '0' ] && {
		RunInUnshare "${@}";
		local R=${?};
		case "${R}" in
			251 )
				export DESLB_REQUEST_WITHOUT_FSV=1;
				RunInUnshare "${@}"
				R=${?};
			;;
		esac
		return ${R};
	}

	# 3rd: Run here in DBSE shell, unshared: vroot, mount

	# 3rd: P1: [Exec, NoReturn] Exec in the world
	[ "${DESLB_RUN_IN_WORLD:-0}:${DESLB_REQUEST_WITHOUT_FSV:-0}" = '0:0' ] && {
		ExecInWorld "${@}"
		return ${?};
	}
	# 3rd: P2: Exec without FSV (for bootstrap building)
	[ "${DESLB_REQUEST_WITHOUT_FSV:-0}:${DESLB_RUN_WITHOUT_FSV:-0}" = '1:0' ] && {
		ExecWithoutFSV "${@}"
		return ${?};
	}

	# 4th: Run DESLBuilderX
	ExecDESLBuilderX "${@}"
	return ${?};
}

# Functions
ExecInDBSE(){
	info 'Starting DESLBuilder as vroot...'

	CheckRoot && {
		CheckUnshare && {
			warning 'We have detected that You are running this as the root user'
			warning '	and current environment supports vroot.'
			warning '	Please run this as a normal user.'
		}
		error 'If you understand all risks of building as root user,'
		error '	set DESLB_RUN_AS_ROOT=1 (ALL DATAS WILL BE ERASED!)'
		return 1;
	}

	# exec [NoReturn]
	DESLB_RUN_AS_ROOT=1 DESLB_ENV_CHECKED=1 DESLB_SH="${CORETOOLS_DIR}/sh" exec "${CORETOOLS_DIR}/sh" "${SELF}" "${@}"

	# Never reach here when success
	error 'Failed to start DESLBuilder as vroot'
	return 127;
}

RunInUnshare(){
	# GenerateSessionID;
	export DESLB_SESSION_DIR="${BUILD_ROOT_DIR}/session";

	mkdir -p "${DESLB_SESSION_DIR}" || {
		error "Failed to create session directory: ${DESLB_SESSION_DIR}"
		return ${?};
	}

	DESLB_ISOLATED_ENV=1 "${CORETOOLS_DIR}/unshare" -Urm "${CORETOOLS_DIR}/sh" "${SELF}" "${@}"
	return ${?};
}

BindToSessionDir(){ # from (to)
	local F=${1};
	local T=${2:-${F}};
	mkdir -p "${DESLB_SESSION_DIR}/${T}" || return ${?};
	mount -o rbind "${F}" "${DESLB_SESSION_DIR}/${T}" || return ${?};
}

PrepareDESLBWorld(){
	# This will clear by kernel at exit DESLBuilder
	mount -t tmpfs "tmp://DESLBuilder/session" "${DESLB_SESSION_DIR}" || {
		error 'Failed to mount tmpfs in session directory.'
		return ${1};
	}

	mkdir -p "${DESLB_SESSION_DIR}/bin"
	mkdir -p "${DESLB_SESSION_DIR}/etc"
	mkdir -p "${DESLB_SESSION_DIR}/sbin"
	mkdir -p "${DESLB_SESSION_DIR}/usr"
	mkdir -p "${DESLB_SESSION_DIR}/lib"
	mkdir -p "${DESLB_SESSION_DIR}/tmp"
	mkdir -p "${DESLB_SESSION_DIR}/mnt"

	BindToSessionDir /dev || return ${?};
	BindToSessionDir /proc || return ${?};
	BindToSessionDir /sys || return ${?};
	BindToSessionDir "${ROOT_DIR}" /DESLBuilder || return ${?};

	ln -s 'tmp' "${DESLB_SESSION_DIR}/var"

	cp "${DBSE_DIR}/busybox" "${DESLB_SESSION_DIR}/bin/busybox"
	ln -s 'busybox' "${DESLB_SESSION_DIR}/bin/sh"

	chroot "${DESLB_SESSION_DIR}" /bin/busybox --install -s

	cp "/etc/resolv.conf" "${DESLB_SESSION_DIR}/etc"
	return 0;
}

ExecInWorld(){
	PrepareDESLBWorld || return ${?};

	ClearEnvVariables '/sbin:/bin';
	SetEnvVariables;

	DESLB_RUN_IN_WORLD=1 DESLB_SH='/bin/sh' exec chroot "${DESLB_SESSION_DIR}" /DESLBuilder/DESLBuilder "${@}"

	# Never reach here when success
	error 'Failed to start DESLBuilder in world'
	return 127;
}

ExecWithoutFSV(){
	warning 'Restarting DESLBuilder without filesystem virtualization...'

	mkdir -p /tmp || {
		error "Failed to create '/tmp' directory."
		return 1;
	}

	ClearEnvVariables '/sbin:/bin';
	SetEnvVariables;

	export DESLB_SH="${CORETOOLS_DIR}/sh"

	PATH="${PATH_OLD}" DESLB_RUN_IN_WORLD=0 DESLB_RUN_WITHOUT_FSV=1 exec "${DESLB_SH}" "${SELF}" "${@}"

	# Never reach here when success
	error 'Failed to start DESLBuilder in world'
	return 127;
}

ExecDESLBuilderX(){

	mount -t tmpfs "tmp://DESLBuilder/session" '/tmp' || {
		error 'Failed to mount virtualized tmpfs in /tmp directory.'
		return ${1};
	}

	[ "${DESL_BUILDER_X}" = '' ] && SHOW_RESULT_CODE=1;
	[ ! "${DESLB_SUBPROCESS:-0}" = '0' ] && SHOW_RESULT_CODE=0;

	. ${SCRIPTS_DIR}/DESLBuilderX

	DESLB_Main "${@}"

	local R=${?};
	[ "${R}" = '251' ] && return ${R};

	[ "${SHOW_RESULT_CODE}" = '1' ] && {
		[ "${R}" = '0' ] && {
			info "DESLBuilder exited with status code: ${R}"
		} || {
			error "DESLBuilder exited with status code: ${R}"
		}
	}

	return ${R};
}

SetEnvVariables(){
	# Public: Variables
	export DESL_BUILDER="${SELF}";
	export DESLB_SH="${DESLB_SH:-/bin/sh}";

	LoadDirectorySettings;

	# Public: Detect builder CPU arch
	DetectBuilderArch;
	SetDirectoryWithArch;

}

ClearEnvVariables(){
	local NEWPATH="${1}";
	local IFS=$'\n\r';

	for e in `export -p`; do
		IFS=' =';
		set -- ${e}
		case ${2} in
			'') ;;
			DESL_BUILDER | BOOTSTRAP_ARCH* | DESL_TEST_PACKAGE | TERM | PWD ) ;;
			DESLB_*);;
#			*_DIR);;
			PATH )
				[ "${PATH_OLD:+1}" = '' ] && export PATH_OLD="${PATH}"
			;;
			*) export -n ${2}; unset ${2};;
		esac
	done

	export PATH="${NEWPATH}";
}

LoadDirectorySettings(){
	# in DESLBuilder v1, these values were changeable by DirectorySettings.lst
	local BASE_DIR="${1:-${sRoot}}"
	export ROOT_DIR="${BASE_DIR}/";

	export PACKAGES_DIR="${ROOT_DIR}/packages";
	export SCRIPTS_DIR="${ROOT_DIR}/scripts";
	export DL_CACHE_DIR="${ROOT_DIR}/dl_cache";

	export IMAGE_ROOT_DIR="${ROOT_DIR}/bin";
	export BUILD_ROOT_DIR="${ROOT_DIR}/build";
	export TOOLCHAIN_ROOT_DIR="${ROOT_DIR}/toolchain";
	export BOOTSTRAP_ROOT_PREFIX="${ROOT_DIR}/toolchain/bootstrap";

	export ETC_DIR="${SCRIPTS_DIR}/etc";

	return 0;
}

GenerateSessionID(){
	export DESLB_SESSION_ID="DESLB_${RANDOM}_${RANDOM}_${RANDOM}_${RANDOM}_${RANDOM}";
	export DESLB_SESSION_DIR="${BUILD_ROOT_DIR}/session/${DESLB_SESSION_ID}";
	return 0;
}

SetDirectoryWithArch(){
	export BOOTSTRAP_DIR="${BOOTSTRAP_ROOT_PREFIX}-${BOOTSTRAP_ARCH}/core-${BOOTSTRAP_ARCH}";

	export DBSE_DIR="${BOOTSTRAP_ROOT_PREFIX}-${BOOTSTRAP_ARCH}/DBSE";
	export CORETOOLS_DIR="${DBSE_DIR}/coretools";
}

CheckAndBuildScriptEngine(){
	[ -e "${CORETOOLS_DIR}/sh" ] && return 0;

	warning 'Building prerequisite: DESLBuilder Script Engine'
	${DESLB_SH} "${SCRIPTS_DIR}/SetupScriptEngine" || {
		error 'Failed to setup DESLBuilder Script Engine'
		return 1;
	}

	return 0;
}

DetectBuilderArch(){
	local T=${1};
	[ "${T}" = '' ] && {
		T=`${DESLB_SH} ${ETC_DIR}/config.guess`;
	}
	local OFS="${IFS}";
	local IFS=$'-';
	set -- ${T:-${ARCH}}
	IFS="${OFS}";

	local T1=${1};
	local T3=${3};

	[ "${T3}" = "" ] && {
		export DESLB_FAILED_TO_DETECT_ARCH=1
		warning 'DESLBuilder may not be supported by your shell or environment.'
	}

	export BOOTSTRAP_ARCH_ORG=${T1};
	export BOOTSTRAP_ARCH_ORG_T3=${T3}; # Not used: DESLBuilder v2 or later can run under DESLinux only.
	export BOOTSTRAP_ARCH=${T1};
	case ${BOOTSTRAP_ARCH} in
		i686	) BOOTSTRAP_ARCH='x86';;
		x86_64	) BOOTSTRAP_ARCH='x64';;
	esac

	return 0;
}

CheckUnshareWithError(){
	CheckUnshare || {
		error 'Your environment does not support root virtualization. It may be:'
		error '	* Current kernel does not support namespace (CONFIG_USER_NS)'
		error '	* Run this under 'chroot' environment.'
		error '	* (Internal 'unshare' command does not support '-Urm' option.)'
		error 'Please use DESLinux or other environments that supports it.'
		return 1;
	}
	return 0;
}

CheckUnshare(){
	"${CORETOOLS_DIR}/unshare" -Urm "${CORETOOLS_DIR}/sh" "${SELF}" /Exit-Immediately
	return ${R};
}

CheckRoot(){
	local ID=`"${CORETOOLS_DIR}/id" -u`;
	return ${ID};
}

error(){
	echo -e "\e[31;1mE:\e[m\e[1m ${*}\e[m" >&2
}
warning(){
	echo -e "\e[33;1mW:\e[m\e[1m ${*}\e[m" >&2
}
infoex(){
	echo -e "\e[m\e[1mI:\e[m\e[1m ${*}\e[m"
}
info(){
	echo -e "I: ${*}"
}


# Override by 'VerboseOutput.sh' when DESL_OUTPUT_VERBOSE != 0
vinfo(){
	:
}
vinfoex(){
	:
}

DESLBuilder "${@}";
