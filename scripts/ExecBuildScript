#!INCLUDE_ONLY
#//////////////////////////////////////////////////
#//DESLinux Builder
#//	(C)2014-2022 Dark Embedded Systems.
#//	http://xprj.net/
#//////////////////////////////////////////////////

# Check run conrition
[ "${DESL_BUILDER_X:-0}" = '0' ] && {
	error "This script must run from DESLBuilder."
	return 1;
}

# Includes
. "${SCRIPTS_DIR}/ArgsParser.sh"
. "${SCRIPTS_DIR}/ConfigManager.sh"
. "${INCLUDES_DIR}/DESLBPackageReader.sh"

RunDESLBScript(){ # mode
	local BUILD_MODE="${1}";
	# Enable verbose output (To reduce 'if')
	[ ! "${DESL_OUTPUT_VERBOSE:-0}" = '0' ] && . "${INCLUDES_DIR}/VerboseOutput_Build.sh"

	PKG_FILE="${PACKAGES_DIR}/${DESL_BUILD_PACKAGE}/DESLPackage.def";
	PackageLoad "${DESL_BUILD_PACKAGE}" "${PKG_FILE}" || return ${?};

	# Load default script
	. "${DEFAULTS_DIR}/DESLBScript.sh"
	. "${INCLUDES_DIR}/DESLBScriptHelper.sh"

	# Make writable build directory
	vinfo "Preparing build directory"
	export CURRENT_BUILD_DIR="${BUILD_DIR}/${Package_Source_RootDir}";
	export SHARED_BUILD_DIR="${SHARED_SOURCE_ROOT_DIR}/${Package_Source_RootDir}";
	export CURRENT_PACKAGE_DIR="${PACKAGES_DIR}/${DESL_BUILD_PACKAGE}";

	vinfo "Loading DESLBScript.sh"
	[ -e "${PACKAGES_DIR}/${DESL_BUILD_PACKAGE}/DESLBScript.sh" ] && {
		vinfo "No DESLBScript.sh found. Using default DESLBSCript.sh"
		. "${PACKAGES_DIR}/${DESL_BUILD_PACKAGE}/DESLBScript.sh"
	}

	vinfo "Open build / package directory"
	PrepareBuildDirectory "${CURRENT_BUILD_DIR}" "${SHARED_BUILD_DIR}" || return ${?};

	cd "${CURRENT_BUILD_DIR}"
	vinfo "Starting build process: ${BUILD_MODE}"
	case "${BUILD_MODE}" in
		Config )
			case "${2}" in
				'' )
					case "${DESLB_SKIP_CONFIG_IF_EXISTS}" in
						'' | '-' )
							EBSStartMessage 'Config'
							DESLBInitialize || return ${?};
							DESLBConfig || return ${?};
						;;
						* )
							[ -e "${DESLB_SKIP_CONFIG_IF_EXISTS}" ] && {
								info "Already configured. Use '/Reconfig' to reconfigure."
								return 0;
							}
							EBSStartMessage 'Config'
							DESLBInitialize || return ${?};
							DESLBConfig || return ${?};
						;;
					esac
				;;
				'force' )
					EBSStartMessage 'Config'
					DESLBInitialize || return ${?};
					DESLBConfig || return ${?};
				;;
				'defconfig' ) error "NOT IMPLEMENTED"; return 1;;
				'menuconfig' ) error "NOT IMPLEMENTED"; return 1;;
			esac
		;;
		Compile )
			EBSStartMessage 'Compile'
			DESLBInitialize || return ${?};
			DESLBCompile || return ${?};
		;;
		Install )
			EBSStartMessage 'Install'
			DESLBInitialize || return ${?};
			DESLBInstall || return ${?};
			MakeDLP || return ${?};
		;;
		Clean )
			EBSStartMessage 'Clean'
			DESLBClean || return ${?};
		;;
		*)
			error "Unsupported build mode '${BUILD_MODE}'"
			return 1;
		;;
	esac
	return 0;

}

PrepareBuildDirectory(){ # build_dir, shared_dir
	local W_DIR="${1}";
	local R_DIR="${2}";
	mkdir -p "${W_DIR}"

	local OV_WORK_DIR="${W_DIR}/tmp";
	local OV_UPPER_DIR="${W_DIR}/build";

	export SHARED_SOURCE_DIR='-';
	[ ! "${Package_ImportCoreInfo:--}" = '-' ] && {
		vinfo 'This package imports CoreInfo'
		DSH_GetSharedDirectory "${Package_ImportCoreInfo}";

		R_DIR="${SHARED_SOURCE_DIR}";
	}

	[ "${DESLB_SUPPORT_NATIVE_ISOLATION:-0}" = '1' ] && {
		vinfo 'This package supports native isolation'
		SHARED_SOURCE_DIR="${R_DIR}";
		return 0;
	}

	[ "${R_DIR}" = '' ] && {
		R_DIR="/tmp/.blank_dir_${RANDOM}_${RANDOM}";
		mkdir -p "${R_DIR}"
	}

	mkdir -p "${OV_WORK_DIR}"
	mkdir -p "${OV_UPPER_DIR}"

	mount -t overlay "build://${W_DIR}" "${W_DIR}" -o "rw,lowerdir=${R_DIR},upperdir=${OV_UPPER_DIR},workdir=${OV_WORK_DIR}" || return ${?};

	return 0;
}

MakeDLP(){
	local DESL_ARCH_LOCAL="${DESL_ARCH}";
	local PKGID_LOCAL="${Package_ID}";
	case "${Package_Category}" in
		toolchain-base | toolchain )
			DESL_ARCH_LOCAL="${BUILDER_ARCH}";
			;;
	esac


	local DLP_ROOT_DIR="${DLP_DEST_DIR}/root";
	[ ! -e "${DLP_INSTALL_DIR}" ] && {
		vinfoex "No files are installed."
		return 0;
	}

	local x;
	for x in `find . -name "${DLP_INSTALL_DIR}"`; do
		${DESL_TARGET}-strip -d "${x}" > /dev/null 2>&1
	done

	local BaseSystem='';
	case "${PACKAGE_ROOT_CATEGORY}" in
		'bootstrap' | 'toolchain-base' | 'toolchain' ) BaseSystem='/System:DESLBuilder';;
	esac
	mkdir -p "${DLP_ROOT_DIR}/"

	{ # doc
		local M=0;
		mkdir -p "${DLP_ROOT_DIR}/share"
		[ -e "${DLP_INSTALL_DIR}/share/doc" ] && {
			mv "${DLP_INSTALL_DIR}/share/doc" "${DLP_ROOT_DIR}/share" || return ${?};
			M=1;
		}
		[ -e "${DLP_INSTALL_DIR}/share/man" ] && {
			mv "${DLP_INSTALL_DIR}/share/man" "${DLP_ROOT_DIR}/share" || return ${?};
			M=1;
		}
		[ -e "${DLP_INSTALL_DIR}/share/info" ] && {
			mv "${DLP_INSTALL_DIR}/share/info" "${DLP_ROOT_DIR}/share" || return ${?};
			M=1;
		}

		# remove share/ if empty
		rmdir "${DLP_INSTALL_DIR}/share/" 2>/dev/null
		rmdir "${DLP_ROOT_DIR}/share/" 2>/dev/null

		[ "${M}" = '1' ] && {
			RunDLPI /Create /Dir:"${DLP_ROOT_DIR}" /PackageDef:"${PACKAGES_DIR}/${DESL_BUILD_PACKAGE}/DESLPackage.def" /Platform:${DESL_ARCH_LOCAL} /ID:${Package_Category}/${PKGID_LOCAL}-doc /SaveTo:"${DLP_DIR}/${Package_Category}/${PKGID_LOCAL}-doc_${Package_ID_Suffix}_${DESL_ARCH_LOCAL}.dlp" ${BaseSystem} || return ${?};

			rm -rf "${DLP_ROOT_DIR}" || return ${?};
			mkdir -p "${DLP_ROOT_DIR}" || return ${?};
		}

	}

	{ # dev
		local M=0;
		local x p;
		mkdir -p "${DLP_ROOT_DIR}/lib"

		[ -e "${DLP_INSTALL_DIR}/include" ] && {
			mv "${DLP_INSTALL_DIR}/include" "${DLP_ROOT_DIR}" || return ${?};
			M=1;
		}

		[ -e "${DLP_INSTALL_DIR}/lib/pkgconfig" ] && {
			mv "${DLP_INSTALL_DIR}/lib/pkgconfig" "${DLP_ROOT_DIR}/lib" || return ${?};
			M=1;
		}

		for x in `find "${DLP_INSTALL_DIR}" -name "*.a"`; do
			p="${DLP_ROOT_DIR}/${x#${DLP_INSTALL_DIR}}";
			mkdir -p "${p%/*}" || return ${?};
			"${DESL_TARGET}-strip" --strip-unneeded "${x}" 2>/dev/null
			mv "${x}" "${p}" || return ${?};
			M=1;
		done

		# remove share/ if empty
		rmdir "${DLP_ROOT_DIR}/include/" 2>/dev/null
		rmdir "${DLP_ROOT_DIR}/lib/" 2>/dev/null

		[ "${M}" = '1' ] && {
			RunDLPI /Create /Dir:"${DLP_ROOT_DIR}" /PackageDef:"${PACKAGES_DIR}/${DESL_BUILD_PACKAGE}/DESLPackage.def" /Platform:${DESL_ARCH_LOCAL} /ID:${Package_Category}/${PKGID_LOCAL}-dev /SaveTo:"${DLP_DIR}/${Package_Category}/${PKGID_LOCAL}-dev_${Package_ID_Suffix}_${DESL_ARCH_LOCAL}.dlp" ${BaseSystem} || return ${?};
			rm -rf "${DLP_ROOT_DIR}" || return ${?};
			mkdir -p "${DLP_ROOT_DIR}" || return ${?};
		}

	}

	# Cleanup
	for x in `find "${DLP_INSTALL_DIR}" -name "*.la"`; do
		rm "${x}" || return ${?};
		rmdir "${x%/*}" 2>/dev/null
	done

	CheckEmptyDir "${DLP_INSTALL_DIR}" && {
		warning "No main files found to install."
	} || {

		for x in `find "${DLP_INSTALL_DIR}" -type f`; do
			"${DESL_TARGET}-strip" --strip-unneeded "${x}" 2>/dev/null
		done
		RunDLPI /Create /Dir:"${DLP_INSTALL_DIR}" /PackageDef:"${PACKAGES_DIR}/${DESL_BUILD_PACKAGE}/DESLPackage.def" /Platform:${DESL_ARCH_LOCAL} /ID:${Package_Category}/${PKGID_LOCAL} /SaveTo:"${DLP_DIR}/${Package_Category}/${PKGID_LOCAL}_${Package_ID_Suffix}_${DESL_ARCH_LOCAL}.dlp" ${BaseSystem} || return ${?};
	}

	return 0;
}

RunDLPI(){
	case ${DESLB_RUN_IN_WORLD} in
		1) DESLB_SUBPROCESS=1 "${SCRIPTS_DIR}/dlpi" "${@}" || return ${?};;
		*) DESLB_SUBPROCESS=1 "${CORETOOLS_DIR}/sh" "${SCRIPTS_DIR}/dlpi" "${@}" || return ${?};;
	esac
	return 0;
}

CheckEmptyDir(){
	local P="${1}";
	set -- ${1}/*
	[ "${P}/*" = "${1}" ] && return 0;
	return 1;
}

EBSStartMessage(){
	infoex "${1}"
	return 0;
}

error(){
	echo -e "\e[31;1mE:\e[m\e[1m [${DESLB_NESTLV}] ${DESL_BUILD_PACKAGE}: ${*}\e[m" >&4
}
warning(){
	echo -e "\e[33;1mW:\e[m\e[1m [${DESLB_NESTLV}] ${DESL_BUILD_PACKAGE}: ${*}\e[m" >&4
}
infoex(){
	echo -e "\e[m\e[1mI:\e[m\e[1m [${DESLB_NESTLV}] ${DESL_BUILD_PACKAGE}: ${*}\e[m" >&3
}
info(){
	echo -e "I: [${DESLB_NESTLV}] ${DESL_BUILD_PACKAGE}: ${*}" >&3
}

# Override by 'VerboseOutput.sh' when DESL_OUTPUT_VERBOSE != 0
vinfo(){
	:
}
vinfoex(){
	:
}



RunDESLBScript "${@}";
