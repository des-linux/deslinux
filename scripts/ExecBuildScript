#!INCLUDE_ONLY
#//////////////////////////////////////////////////
#//DESLinux Builder
#//	(C)2014-2022 Dark Embedded Systems.
#//	http://xprj.net/
#//////////////////////////////////////////////////

# Check run conrition
[ "${DESL_BUILDER_X:-0}" = '0' ] && {
	error "This script must run from DESLBuilder."
	return 1;
}

# Includes
. "${SCRIPTS_DIR}/ArgsParser.sh"
. "${SCRIPTS_DIR}/ConfigManager.sh"
. "${INCLUDES_DIR}/DESLBPackageReader.sh"

RunDESLBScript(){ # mode
	local BUILD_MODE="${1}";
	# Enable verbose output (To reduce 'if')
	[ ! "${DESL_OUTPUT_VERBOSE:-0}" = '0' ] && . "${INCLUDES_DIR}/VerboseOutput_Build.sh"

	PKG_FILE="${PACKAGES_DIR}/${DESL_BUILD_PACKAGE}/DESLPackage.def";
	PackageLoad "${DESL_BUILD_PACKAGE}" "${PKG_FILE}" || return ${?};

	# Load default script
	. "${INCLUDES_DIR}/DESLBScript.sh"
	. "${INCLUDES_DIR}/DESLBScriptHelper.sh"

	# Make writable build directory
	vinfo "Preparing build directory"
	export CURRENT_BUILD_DIR="${BUILD_DIR}/${Package_Source_RootDir}";
	export SHARED_BUILD_DIR="${SHARED_SOURCE_ROOT_DIR}/${Package_Source_RootDir}";
	export CURRENT_PACKAGE_DIR="${PACKAGES_DIR}/${DESL_BUILD_PACKAGE}";

	vinfo "Loading DESLBScript.sh"
	. "${PACKAGES_DIR}/${DESL_BUILD_PACKAGE}/DESLBScript.sh"

	vinfo "Open build / package directory"
	PrepareBuildDirectory "${CURRENT_BUILD_DIR}" "${SHARED_BUILD_DIR}" || return ${?};

	cd "${CURRENT_BUILD_DIR}"
	vinfo "Starting build process: ${BUILD_MODE}"
	case "${BUILD_MODE}" in
		Config )
			DESLBConfig || return ${?};
			;;
		Compile )
			DESLBCompile || return ${?};
			;;
		Install )
			DESLBInstall || return ${?};
			MakeDLP || return ${?};
			;;
		Clean )
			DESLBClean || return ${?};
			;;
		*)
			error "Unsupported build mode '${BUILD_MODE}'"
			return 1;
			;;
	esac
	return 0;

}

PrepareBuildDirectory(){ # build_dir, shared_dir
	local W_DIR="${1}";
	local R_DIR="${2}";
	mkdir -p "${W_DIR}"

	export SHARED_SOURCE_DIR='-';
	[ ! "${Package_ImportCoreInfo:--}" = '-' ] && {
		vinfo 'This package imports CoreInfo'
		DESLBP_GetSharedDirectory "${Package_ImportCoreInfo}";
		return 0;
	}
	[ "${DESLB_SUPPORT_NATIVE_ISOLATION:-0}" = '1' ] && {
		vinfo 'This package supports native isolation'
		SHARED_SOURCE_DIR="${R_DIR}";
		return 0;
	}

	[ "${R_DIR}" = '' ] && {
		R_DIR="/tmp/.blank_dir_${RANDOM}_${RANDOM}";
		mkdir -p "${R_DIR}"
	}

	local OV_WORK_DIR="${W_DIR}/tmp";
	local OV_UPPER_DIR="${W_DIR}/build";
	mkdir -p "${OV_WORK_DIR}"
	mkdir -p "${OV_UPPER_DIR}"

	mount -t overlay "build://${W_DIR}" "${W_DIR}" -o "rw,lowerdir=${R_DIR},upperdir=${OV_UPPER_DIR},workdir=${OV_WORK_DIR}" || return ${?};

	return 0;
}

MakeDLP(){
	local DLP_ROOT_DIR="${DLP_DEST_DIR}/root";
	[ ! -e "${DLP_INSTALL_DIR}" ] && {
		vinfoex "No files are installed."
		return 0;
	}

	local BaseSystem='';
	[ "${PACKAGE_ROOT_CATEGORY}" = 'bootstrap' ] && BaseSystem='/System:DESLBuilder';
	mkdir -p "${DLP_ROOT_DIR}/"

	{ # doc
		local M=0;
		mkdir -p "${DLP_ROOT_DIR}/share"
		[ -e "${DLP_INSTALL_DIR}/share/doc" ] && {
			mv "${DLP_INSTALL_DIR}/share/doc" "${DLP_ROOT_DIR}/share" || return ${?};
			M=1;
		}
		[ -e "${DLP_INSTALL_DIR}/share/man" ] && {
			mv "${DLP_INSTALL_DIR}/share/man" "${DLP_ROOT_DIR}/share" || return ${?};
			M=1;
		}
		[ -e "${DLP_INSTALL_DIR}/share/info" ] && {
			mv "${DLP_INSTALL_DIR}/share/info" "${DLP_ROOT_DIR}/share" || return ${?};
			M=1;
		}

		# remove share/ if empty
		rmdir "${DLP_INSTALL_DIR}/share/" 2>/dev/null
		rmdir "${DLP_ROOT_DIR}/share/" 2>/dev/null

		[ "${M}" = '1' ] && {
			RunDLPI /Create /Dir:"${DLP_ROOT_DIR}" /PackageDef:"${PACKAGES_DIR}/${DESL_BUILD_PACKAGE}/DESLPackage.def" /Platform:${DESL_ARCH} /ID:${DESL_BUILD_PACKAGE}-doc /SaveTo:"${DLP_DIR}/${Package_Category}/${Package_ID}-doc_${Package_ID_Suffix}_${DESL_ARCH}.dlp" ${BaseSystem} || return ${?};

			rm -rf "${DLP_ROOT_DIR}" || return ${?};
			mkdir -p "${DLP_ROOT_DIR}" || return ${?};
		}

	}

	{ # dev
		local M=0;
		local x p;
		mkdir -p "${DLP_ROOT_DIR}/lib"

		[ -e "${DLP_INSTALL_DIR}/include" ] && {
			mv "${DLP_INSTALL_DIR}/include" "${DLP_ROOT_DIR}" || return ${?};
			M=1;
		}

		[ -e "${DLP_INSTALL_DIR}/lib/pkgconfig" ] && {
			mv "${DLP_INSTALL_DIR}/lib/pkgconfig" "${DLP_ROOT_DIR}/lib" || return ${?};
			M=1;
		}

		for x in `find "${DLP_INSTALL_DIR}" -name "*.a"`; do
			p="${DLP_ROOT_DIR}/${x#${DLP_INSTALL_DIR}}";
			mkdir -p "${p%/*}" || return ${?};
			mv "${x}" "${p}" || return ${?};
			M=1;
		done

		# remove share/ if empty
		rmdir "${DLP_ROOT_DIR}/include/" 2>/dev/null
		rmdir "${DLP_ROOT_DIR}/lib/" 2>/dev/null

		[ "${M}" = '1' ] && {
			RunDLPI /Create /Dir:"${DLP_ROOT_DIR}" /PackageDef:"${PACKAGES_DIR}/${DESL_BUILD_PACKAGE}/DESLPackage.def" /Platform:${DESL_ARCH} /ID:${DESL_BUILD_PACKAGE}-dev /SaveTo:"${DLP_DIR}/${Package_Category}/${Package_ID}-dev_${Package_ID_Suffix}_${DESL_ARCH}.dlp" ${BaseSystem} || return ${?};
			rm -rf "${DLP_ROOT_DIR}" || return ${?};
			mkdir -p "${DLP_ROOT_DIR}" || return ${?};
		}

	}

	# Cleanup
	for x in `find "${DLP_INSTALL_DIR}" -name "*.la"`; do
		rm "${x}" || return ${?};
		rmdir "${x%/*}" 2>/dev/null
	done

	CheckEmptyDir "${DLP_INSTALL_DIR}" && {
		warning "No main files found to install."
	} || {
		RunDLPI /Create /Dir:"${DLP_INSTALL_DIR}" /PackageDef:"${PACKAGES_DIR}/${DESL_BUILD_PACKAGE}/DESLPackage.def" /Platform:${DESL_ARCH} /ID:${DESL_BUILD_PACKAGE} /SaveTo:"${DLP_DIR}/${Package_Category}/${Package_ID}_${Package_ID_Suffix}_${DESL_ARCH}.dlp" ${BaseSystem} || return ${?};
	}

	return 0;
}

RunDLPI(){
	case ${DESLB_RUN_IN_WORLD} in
		1) DESLB_SUBPROCESS=1 "${SCRIPTS_DIR}/dlpi" "${@}" || return ${?};;
		*) DESLB_SUBPROCESS=1 "${CORETOOLS_DIR}/sh" "${SCRIPTS_DIR}/dlpi" "${@}" || return ${?};;
	esac
	return 0;
}

CheckEmptyDir(){
	local P="${1}";
	set -- ${1}/*
	[ "${P}/*" = "${1}" ] && return 0;
	return 1;
}

error(){
	echo -e "\e[31;1mE:\e[m\e[1m DESLBScript [${DESL_BUILD_PACKAGE}]: ${*}\e[m" >&4
}
warning(){
	echo -e "\e[33;1mW:\e[m\e[1m DESLBScript [${DESL_BUILD_PACKAGE}]: ${*}\e[m" >&4
}
infoex(){
	echo -e "\e[m\e[1mI:\e[m\e[1m DESLBScript [${DESL_BUILD_PACKAGE}]: ${*}\e[m" >&3
}
info(){
	echo -e "I: DESLBScript [${DESL_BUILD_PACKAGE}]: ${*}" >&3
}

# Override by 'VerboseOutput.sh' when DESL_OUTPUT_VERBOSE != 0
vinfo(){
	:
}
vinfoex(){
	:
}



RunDESLBScript "${@}";
