#!INCLUDE_ONLY
#//////////////////////////////////////////////////
#//DESLinux Builder
#//	(C)2014-2022 Dark Embedded Systems.
#//	http://xprj.net/
#//////////////////////////////////////////////////

# Check run conrition
[ "${DESL_BUILDER_X:-0}" = '0' ] && {
	error "This script must run from DESLBuilder."
	return 1;
}

# Includes
. "${SCRIPTS_DIR}/ArgsParser.sh"
. "${SCRIPTS_DIR}/ConfigManager.sh"
. "${INCLUDES_DIR}/DESLBPackageReader.sh"

RunDESLBScript(){ # mode
	local BUILD_MODE="${1}";

	# Enable verbose output (To reduce 'if')
	[ ! "${DESL_OUTPUT_VERBOSE:-0}" = '0' ] && . "${INCLUDES_DIR}/VerboseOutput.sh"

	PKG_FILE="${PACKAGES_DIR}/${DESL_BUILD_PACKAGE}/DESLPackage.def";
	PackageLoad "${PKG_FILE}";

	# Load default script
	. "${INCLUDES_DIR}/DESLBScript.sh"
	. "${INCLUDES_DIR}/DESLBScriptHelper.sh"

	# Protect shared directories from mistake operations
	# SECURITY WARNING: This is not for security. 'umount "${ROOT_DIR}"' can unprotect it easily.
	vinfo "Loading DESLBScript.sh"
	ProtectDirectory "${ROOT_DIR}" || return ${?};
	. "${PACKAGES_DIR}/${DESL_BUILD_PACKAGE}/DESLBScript.sh"
	UnprotectDirectory "${ROOT_DIR}"

	# Make writable build directory
	vinfo "Preparing build directory"
	export CURRENT_BUILD_DIR="${BUILD_DIR}/${Package_Source_RootDir}";
	export SHARED_BUILD_DIR="${SHARED_SOURCE_ROOT_DIR}/${Package_Source_RootDir}";
	export CURRENT_PACKAGE_DIR="${PACKAGES_DIR}/${DESL_BUILD_PACKAGE}";

	PrepareBuildDirectory "${CURRENT_BUILD_DIR}" "${SHARED_BUILD_DIR}" || return ${?};
	# ReserveWritableDirectory "${CURRENT_PACKAGE_DIR}"

	vinfo "Protecting DESLBuilder"
	ProtectDirectory "${ROOT_DIR}" || return ${?};

	vinfo "Open build / package directory"
	BindWritebleDirectory "${CURRENT_BUILD_DIR}" || return ${?};
	# BindWritebleDirectory "${CURRENT_PACKAGE_DIR}" || return ${?};

	vinfo "Starting build process: ${BUILD_MODE}"
	cd "${CURRENT_BUILD_DIR}"
	case "${BUILD_MODE}" in
		Config )
			DESLBConfig || return ${?};
			;;
		Compile )
			DESLBCompile || return ${?};
			;;
		Install )
			DESLBInstall || return ${?};
			MakeDLP || return ${?};
			;;
		*)
			error "Unsupported build mode '${BUILD_MODE}'"
			return 1;
			;;
	esac
	return 0;
}

ProtectDirectory(){ # path
	local BLANK_DIR="/tmp/.blank_dir_${RANDOM}_${RANDOM}";
	mkdir -p "${BLANK_DIR}"
	mount -t overlay "protect://${1}" "${1}" -o "ro,lowerdir=${1}:${BLANK_DIR}" || return ${?};
	return 0;
}

UnprotectDirectory(){ # path
	umount "${1}" || return ${?};
	return 0;
}

ReserveWritableDirectory(){ # writedir, readdir
	local W_DIR="${1}";
	local R_DIR="${2}";

	local WRITABLE_BUILD_DIR="/tmp/build/${1}";
	mkdir -p "${WRITABLE_BUILD_DIR}"

	[ "${R_DIR}" = '' ] && {
		#mount -o bind "${W_DIR}" "${WRITABLE_BUILD_DIR}" || return ${?};
		#return 0;
		R_DIR="/tmp/.blank_dir_${RANDOM}_${RANDOM}";
		mkdir -p "${R_DIR}"
	}

	local OV_WORK_DIR="${W_DIR}/temp";
	local OV_UPPER_DIR="${W_DIR}/build";
	mkdir -p "${OV_WORK_DIR}"
	mkdir -p "${OV_UPPER_DIR}"

	mount -t overlay "build://${W_DIR}" "${WRITABLE_BUILD_DIR}" -o "rw,lowerdir=${R_DIR},upperdir=${OV_UPPER_DIR},workdir=${OV_WORK_DIR}" || return ${?};

	return 0;
}

BindWritebleDirectory(){ #writedir
	local WRITABLE_BUILD_DIR="/tmp/build/${1}";
	mount -o bind "${WRITABLE_BUILD_DIR}" "${1}"
}

PrepareBuildDirectory(){ # build_dir, shared_dir
	[ "${DESLB_SUPPORT_NATIVE_ISOLATION:-0}" = '1' ] && {
		vinfo 'This package supports native isolation'
		ReserveWritableDirectory "${1}"
		return 0;
	}

	ReserveWritableDirectory "${1}" "${2}"
	return 0;
}

MakeDLP(){

	[ ! -e "${DLP_INSTALL_DIR}" ] && {
		vinfoex "No files are installed."
		return 0;
	}

	find $DLP_INSTALL_DIR

	error "${SCRIPTS_DIR}/dlpi" /Create /Dir:"${DLP_INSTALL_DIR}" \
		/Script:"${CURRENT_PACKAGE_DIR}/DESLPackage.sh" \
		/MetaData:"${CURRENT_PACKAGE_DIR}/DESLPackage.def" \
		/DataType:DLP || return ${?};
	return 0;
}

error(){
	echo -e "\e[31;1mE:\e[m\e[1m DESLBScript [${DESL_BUILD_PACKAGE}]: ${*}\e[m" >&2
}
warning(){
	echo -e "\e[33;1mW:\e[m\e[1m DESLBScript [${DESL_BUILD_PACKAGE}]: ${*}\e[m" >&2
}
infoex(){
	echo -e "\e[m\e[1mI:\e[m\e[1m DESLBScript [${DESL_BUILD_PACKAGE}]: ${*}\e[m"
}
info(){
	echo -e "I: DESLBScript [${DESL_BUILD_PACKAGE}]: ${*}"
}

# Override by 'VerboseOutput.sh' when DESL_OUTPUT_VERBOSE != 0
vinfo(){
	:
}
vinfoex(){
	:
}



RunDESLBScript "${@}";
