#!/bin/echo E: Use DESLBuilder instead of

# Always run as vroot with cleaned environemnt variable (But not in DESLBWorld)

DESLB_Main(){

	[ "${DESLB_STARTUP_PATH}" = '' ] && {
		export DESLB_STARTUP_PATH="${PATH}";
	}
	PATH="${DESLB_STARTUP_PATH}";

	# DESLBuilderX marker
	export DESL_BUILDER_X=1;

	[ "${DESLB_NESTLV:--}" = '-' ] && DESLB_NESTLV=0;
	export DESLB_NESTLV=$((DESLB_NESTLV+1));

	export PS1='DESLBuilder [${DESLB_NESTLV}] \$ \w>';


	# Includes (At this point, INCLUDES_DIR is not defined.)
	. "${SCRIPTS_DIR}/ConfigManager.sh"
	. "${SCRIPTS_DIR}/ArgsParser.sh"
	. "${SCRIPTS_DIR}/RunScripts.sh"

	# Startup
	ParseArgs ${MAKEFLAGS} "${@}";

	# Configuration
	export DESLB_CONFIG_FILE="${ARGS_OPT_LONG_ConfigFile-"${ROOT_DIR}/.config"}";
	[ -e "${DESLB_CONFIG_FILE}" ] && {
		ConfigLoad "${ROOT_DIR}/.config" > ${N}
		for v in `ConfigListWithValue`; do
			eval CONFIG_${v//:/_}
		done
	}

	# Variables
	ExportBootstrapArch;
	GetTargetArch;
	ExportDirsPath;
	ExportByArgs;

	# Verify 'Arch'
	VerifyArch || return ${?};

	# Bootstrap/MakeCPIO,bintuils,gcc -> Use native system tools
	[ "${DESLB_RUN_WITHOUT_FSV:-0}:${PACKAGE_ROOT_CATEGORY}" = '0:bootstrap' ] && {
		export DESLB_FSV_ARGS="${ARGS_RAW_STRING}";
		return 250; # Restart in current args without FSV
	}

	# Enable verbose output (To reduce 'if')
	[ ! "${DESL_OUTPUT_VERBOSE:-0}" = '0' ] && . "${INCLUDES_DIR}/VerboseOutput.sh"

	# Override BUILD_DIR if package is bootstrap/*, toolchain-base/*
	ChangeEnvIfPackageIsBootstrap;
	ChangeEnvIfPackageIsToolchainBase;
	ChangeEnvIfPackageIsToolchain;

	[ ! "${ARGS_TARGET}" = "ExportEnv" ] && {
		SetupToolchainSharedDir || return ${?};
	}

	[ "${DESLB_RUN_WITHOUT_FSV:-0}" = '0' ] && {
		AddPATH "${TOOLCHAIN_DIR}" "${TOOLCHAIN_TOOLS_DIR}" "${TOOLCHAIN_TOOLS_CORE_DIR}" "${TOOLCHAIN_BUILDER_DIR}"

		[ ! -e '/lib' ] && [ ! -L '/lib' ] && ln -s "${TOOLCHAIN_BUILDER_DIR}/lib" /lib
		[ ! -e '/usr' ] && [ ! -L '/usr' ] && ln -s "${TOOLCHAIN_TOOLS_DIR}" /usr
	}

	case "${PACKAGE_ROOT_CATEGORY}" in
		'bootstrap' )
			AddPATH "${BOOTSTRAP_DIR}"
		;;

		'toolchain' | 'toolchain-base' )
			# Add bootstrap
			AddPATH "${BOOTSTRAP_DIR}"
			AddPATH "${TOOLCHAIN_BASEARCH_DIR}"
		;;
		DISABLED )
			# Add bootstrap
			AddPATH "${TOOLCHAIN_BASEARCH_DIR}"
			AddPATH "${BOOTSTRAP_DIR}"
		;;
	esac

	# Exception: Building 'make' requires 'Make', 'MakeCPIO' requires 'MakeCPIO'.
	[ "${DESLB_PREREQ_USE_BOOTSTRAP:-0}" = '1' ] && AddPATH "${BOOTSTRAP_DIR}";

	# Command
	. "${INCLUDES_DIR}/DESLBuilder.sh"
	RunMode "${@}";
	local R=${?};

	return ${R};
}




ExportBootstrapArch(){
	local T1=${BOOTSTRAP_ARCH_ORG};
	local T3=${BOOTSTRAP_ARCH_ORG_T3};

	[ "${T1}" = '' ] && {
		local ARCH=`${SCRIPTS_DIR}/config.guess`;
		local T=${1};
		local IFS=$'-';
		set -- ${T:-${ARCH}}
		T1=${1};
		T3=${3};
	}

	export BUILDER_ARCH_BUILD_ORG="${BOOTSTRAP_ARCH_ORG}";

	[ "${T1}" = "x86_64" ] && [ "${ARGS_OPT_LONG_Skip_x86Test}" = '' ] && {
		${SCRIPTS_DIR}/x86test && T1=i686;
	}

	export BUILDER_ARCH_BUILD=${T1};
	export BOOTSTRAP_TARGET="${BUILDER_ARCH_BUILD}-desl_bootstrap-${T3}";

	export BUILDER_ARCH="${BUILDER_ARCH_BUILD}";
	case ${BUILDER_ARCH_BUILD} in
		i686	) BUILDER_ARCH='x86';;
		x86_64	) BUILDER_ARCH='x64';;
	esac

	export BUILDER_ARCH_ORG="${BUILDER_ARCH_BUILD_ORG}";
	case ${BUILDER_ARCH_BUILD_ORG} in
		i686	) BUILDER_ARCH_ORG='x86';;
		x86_64	) BUILDER_ARCH_ORG='x64';;
	esac

	return 0;
}


GetTargetArch(){
	# Get 'DESL_ARCH'
	export DESL_ARCH="${CONFIG_Target_Arch}";

	# Arch override by 'DESLB_ARCH' env. [1/2]
	[ ! "${DESLB_ARCH:-BUILD}" = "BUILD" ] && DESL_ARCH="${DESLB_ARCH}";

	# Arch override by '/Arch' option. [2/2]
	[ ! "${ARGS_OPT_LONG_Arch}" = '' ] && {
		DESL_ARCH="${ARGS_OPT_LONG_Arch}";
	}

	# Special Arch 'BUILD' for build tools.
	[ "${ARGS_OPT_LONG_Arch}" = "BUILD" ] && {
		DESL_ARCH="${BUILDER_ARCH}";

		SKIP_PREREQ=1;
		DESL_INTERNAL_TOOLS=1;
	}

	# Convert DESL_ARCH to internal format
	export DESL_ARCH_BUILD="${DESL_ARCH}";
	case ${DESL_ARCH_BUILD} in
		x86)	DESL_ARCH_BUILD='i686';;
		x64)	DESL_ARCH_BUILD='x86_64';;
	esac

	# Convert DESL_ARCH to internal format by Arch.lst::Patch
	local a b c;
	for a in `ConfigFileList "${SCRIPTS_DIR}/Arch.lst" Patch`; do
		b="${a%=*}";
		c="${a#*=}";
		case "${DESL_ARCH_BUILD}" in
			${b} ) DESL_ARCH_BUILD="${c}${DESL_ARCH_BUILD#${b}*}";
		esac
	done


	# Generate 'DESL_TARGET' by 'DESL_ARCH'
	ExportDESLTarget ${DESL_ARCH_BUILD};
	export DESL_TARGET="${NEW_DESL_TARGET}";

	# Static build
	[ ! "${ARGS_OPT_LONG_Static}${ARGS_OPT_LONG_s}" = '' ] && {
		export DESLB_STATIC=1;
		DESL_TARGET="${DESL_TARGET}_static";
		DESL_ARCH="${DESL_ARCH}_s";
	} || {
		export DESLB_STATIC=0;
	}

	# Generate 'BUILDER_TARGET' by 'BUILDER_ARCH'
	ExportDESLTarget ${BUILDER_ARCH_BUILD};
	export BUILDER_TARGET="${NEW_DESL_TARGET}";

	return 0;
}

ExportDESLTarget(){
	local OFS=${IFS};
	local IFS='-';
	set -- ${*}
	case "${*}" in
		*_hf	) NEW_DESL_TARGET="${1%_*}-des-linux_hf";;
		*_sf	) NEW_DESL_TARGET="${1%_*}-des-linux_sf";;
		*-*	) NEW_DESL_TARGET="${1}-des-linux_${2}";;
		*	) NEW_DESL_TARGET="${1}-des-linux";;
	esac

	case "${NEW_DESL_TARGET}" in
		arm*	) NEW_DESL_TARGET="${NEW_DESL_TARGET}-gnueabi";;
	esac

	return 0;
}

ExportDirsPath(){
	export DEFAULTS_DIR="${SCRIPTS_DIR}"/defaults;
	export INCLUDES_DIR="${SCRIPTS_DIR}"/includes;

	export BUILD_DIR="${BUILD_ROOT_DIR}/desl-${DESL_ARCH}";
	export BUILD_BOOTSTRAP_DIR="${BUILD_ROOT_DIR}/bootstrap-${BOOTSTRAP_ARCH}/builder-${BUILDER_ARCH}";
	export SHARED_SOURCE_ROOT_DIR="${BUILD_ROOT_DIR}/shared";

	export BOOTSTRAP_BASE_DIR="${BOOTSTRAP_ROOT_PREFIX}-${BOOTSTRAP_ARCH}";
	export BOOTSTRAP_DIR="${BOOTSTRAP_BASE_DIR}/builder-${BUILDER_ARCH}";

	export TOOLCHAIN_BASE_DIR="${TOOLCHAIN_ROOT_DIR}/builder-${BUILDER_ARCH}";
	export TOOLCHAIN_TOOLS_CORE_DIR="${TOOLCHAIN_BASE_DIR}/tools";
	export TOOLCHAIN_TOOLS_DIR="${TOOLCHAIN_TOOLS_CORE_DIR}/usr";
	export TOOLCHAIN_DIR="${TOOLCHAIN_BASE_DIR}/desl-${DESL_ARCH}";

	export TOOLCHAIN_USER_BASE_DIR="${TOOLCHAIN_ROOT_DIR}/usr";
	export TOOLCHAIN_USR_DIR="${TOOLCHAIN_DIR}/usr";
	export TOOLCHAIN_LOCAL_DIR="${TOOLCHAIN_USER_BASE_DIR}/local/desl-${DESL_ARCH}";

	export TOOLCHAIN_BUILDER_DIR="${TOOLCHAIN_BASE_DIR}/desl-${BUILDER_ARCH}"

	export CORE_ROOTFS_DIR="${BUILD_DIR}/rootfs/core";
	export ROOTFS_DIR="${BUILD_DIR}/rootfs/desl";

	export IMAGE_DIR="${IMAGE_ROOT_DIR}/desl-${DESL_ARCH}";
	export DLP_DIR="${IMAGE_DIR}/packages";
	export DLP_BUILDER_DIR="${IMAGE_ROOT_DIR}/desl-${BUILDER_ARCH}/packages";
	export DLP_BASEARCH_DIR="${IMAGE_ROOT_DIR}/builder-${BUILDER_ARCH}/base-${BASE_ARCH}/packages"
	export DLP_TOOLCHAIN_DIR="${IMAGE_ROOT_DIR}/builder-${BUILDER_ARCH}/desl-${DESL_ARCH}/packages"

	export IMAGE_BOOTSTRAP_DIR="${IMAGE_ROOT_DIR}/bootstrap-${BOOTSTRAP_ARCH}";
	export DLP_BOOTSTRAP_DIR="${IMAGE_BOOTSTRAP_DIR}/packages";

	export DLP_MAKE_ROOT_DIR="/tmp/dlp";
	export DLP_INSTALL_DIR="${DLP_MAKE_ROOT_DIR}/usr";

	# toolchain for Windows
	export W_DES_TARGET="i686-desl-mingw32";
	export W_BOOTSTRAP_DIR="${BOOTSTRAP_ROOT_PREFIX}-${BOOTSTRAP_ARCH}/win-x86";

	# export CCACHE_DIR="${BUILD_DIR}/ccache.tmp";

	return 0;
}

ExportByArgs(){
	local nproc=`nproc`
	nproc=$((nproc+2));
	ARGS_OPT_N_j="${ARGS_OPT_N_j:-${nproc}}";
	export DESL_BUILD_PACKAGE="${ARGS_OPT_LONG_Package}";
	export PACKAGE_ROOT_CATEGORY="${DESL_BUILD_PACKAGE%%/*}";
	export ARGS_MAKE_CORE="${ARGS_OPT_N_j:+-j${ARGS_OPT_N_j}}";

	export DESL_OUTPUT_VERBOSE=0;
	export DESL_FORCE_STATIC=${DESL_FORCE_STATIC:-0};
	export DESL_INTERNAL_TOOLS=${DESL_INTERNAL_TOOLS:-0};

	[ "${ARGS_OPT_LONG_v}" = '' ] && {
		[ ! "${ARGS_OPT_SHORT_v}${VAL_v}${VAL_V}" = '' ] && ARGS_OPT_LONG_v=1;
		[ ! "${ARGS_OPT_LONG_vv}" = '' ] && ARGS_OPT_LONG_v=2;
	}

	case "${ARGS_OPT_LONG_v}" in
		'' ) ;;
		[1-2] ) DESL_OUTPUT_VERBOSE=$((ARGS_OPT_LONG_v));;
		* ) DESL_OUTPUT_VERBOSE=1;;
	esac

	[ ! "${ARGS_OPT_LONG_Static}" = '' ] && DESL_FORCE_STATIC=1;

	[ "${ARGS_OPT_LONG_help}" = "-" ] && ARGS_TARGET_EX='help';
	[ "${ARGS_OPT_LONG_h}" = "-" ] && ARGS_TARGET_EX='help';
	[ "${ARGS_OPT_SHORT_h}" = "-" ] && ARGS_TARGET_EX='help';

	# /M: option to override mode
	[ ! "${ARGS_OPT_LONG_M}" = '' ] && ARGS_TARGET_EX="${ARGS_OPT_LONG_M:1}";

	return 0;
}

SetupToolchainSharedDir(){

	local DLPI_ARCH_LOCAL="${DESL_ARCH}";
	local TOOLCHAIN_ARCH_LOCAL="${BUILDER_ARCH}";

	[ "${DESLB_BUILDING_BOOTSTRAP:-0}" = '1' ] && {
		DLPI_ARCH_LOCAL="${BUILDER_ARCH_ORG}";
		TOOLCHAIN_ARCH_LOCAL="${BUILDER_ARCH_ORG}";
	}

	[ ! -e "${TOOLCHAIN_DIR}/.dlp/dlp.conf" ] && {
		mkdir -p "${TOOLCHAIN_DIR}" || return ${?};
		RunScript "${SCRIPTS_DIR}/dlpi" /Initialize /Root:${TOOLCHAIN_DIR} /Platform:${TOOLCHAIN_ARCH_LOCAL} /System:DESLBuilder || return ${?};
	}

	[ ! -e "${TOOLCHAIN_TOOLS_CORE_DIR}/.dlp/dlp.conf" ] && {
		mkdir -p "${TOOLCHAIN_TOOLS_CORE_DIR}/bin" || return ${?};
		RunScript "${SCRIPTS_DIR}/dlpi" /Initialize /Root:${TOOLCHAIN_TOOLS_CORE_DIR} /Platform:${BUILDER_ARCH} ${System} || return ${?};
	}

	mkdir -p "${TOOLCHAIN_USR_DIR}" || return ${?};
	mkdir -p "${TOOLCHAIN_TOOLS_DIR}" || return ${?};
	mkdir -p "${TOOLCHAIN_LOCAL_DIR}" || return ${?};

	[ ! "${INTERNAL_NO_LINK_USR_DIR:-0}" = '1' ] && {
		[ -e "${TOOLCHAIN_DIR}" ] && {
			[ ! -e "${TOOLCHAIN_DIR}/linux" ] && {
				rm -f "${TOOLCHAIN_DIR}/linux"
				ln -s  "../tools/linux" "${TOOLCHAIN_DIR}/linux"
			}
		}
	}

	# mkdir -p "${CCACHE_DIR}"

	return 0;
}


VerifyArch(){
	local a;
	local OFS=${IFS};
	local IFS;
	local DESL_ARCH_LOCAL="${DESL_ARCH}";

	[ ! "${SKIP_ARCH_VERIFY}" = '' ] && {
		return 0;
	}

	[ "${DESLB_STATIC}" = '1' ] && {
		DESL_ARCH_LOCAL="${DESL_ARCH%_s}";
	}

	IFS=$'\n\r';
	for a in `ConfigFileList "${SCRIPTS_DIR}/Arch.lst" Arch`; do
		case "${a}" in
			*=*,* )
				[ "${a%%=*}" = "${DESL_ARCH_LOCAL}" ] && {
					export BASE_ARCH_ARGS="${a#*=}";
					export BASE_ARCH="${BASE_ARCH_ARGS%%,*}";
					BASE_ARCH="${BASE_ARCH// /}";

					export BASE_ARCH_BUILD="${BASE_ARCH}";
					case ${BASE_ARCH_BUILD} in
						x86)	BASE_ARCH_BUILD='i686';;
						x64)	BASE_ARCH_BUILD='x86_64';;
						x86_*)	BASE_ARCH_BUILD="i686_${BASE_ARCH_BUILD#*_}";;
						x64_*)	BASE_ARCH_BUILD="x86_64_${BASE_ARCH_BUILD#*_}";;
					esac

					# Generate 'DESL_TARGET' by 'DESL_ARCH'
					ExportDESLTarget ${BASE_ARCH_BUILD};
					export BASE_TARGET="${NEW_DESL_TARGET}";

					export TOOLCHAIN_BASEARCH_DIR="${TOOLCHAIN_ROOT_DIR}/builder-${BUILDER_ARCH}/base-${BASE_ARCH}";

					return 0;
				}
				;;
		esac
	done

	# If installed, always ok. (Including manually installed toolchain)
	[ -e "${TOOLCHAIN_DIR}/desl_toolchain" ] && return 0;

	error "Unsupported platform '${DESL_ARCH}' specified."
	error "SKIP_ARCH_VERIFY=1 to skip this check."
	error "Or add this platform to '${SCRIPTS_DIR}/Arch.lst' section '[User]'"
	exit 1;
}

ChangeEnvIfPackageIsBootstrap(){
	[ "${PACKAGE_ROOT_CATEGORY}" = 'bootstrap' ] && {
		export DESLB_BUILDING_BOOTSTRAP=1;
	} || {
		export DESLB_BUILDING_BOOTSTRAP=0;
		return 0;
	}

	DESL_ARCH="${BOOTSTRAP_ARCH}";
	DESL_ARCH_BUILD="${BOOTSTRAP_ARCH_ORG}";
	DESL_ARCH_BUILD_ORG="${BOOTSTRAP_ARCH_ORG}";

	BUILD_DIR="${BUILD_BOOTSTRAP_DIR}";
	DLP_DIR="${DLP_BOOTSTRAP_DIR}";

	TOOLCHAIN_DIR="${BOOTSTRAP_DIR}";
	TOOLCHAIN_USER_BASE_DIR="${TOOLCHAIN_DIR}";
	TOOLCHAIN_USR_DIR="${TOOLCHAIN_USER_BASE_DIR}";
	TOOLCHAIN_LOCAL_DIR="${TOOLCHAIN_USER_BASE_DIR}";
	TOOLCHAIN_TOOLS_DIR="${TOOLCHAIN_DIR}";

	INTERNAL_NO_LINK_USR_DIR=1;

	return 0;
}

ChangeEnvIfPackageIsToolchainBase(){

	case "${DESL_BUILD_PACKAGE}" in
		toolchain-base/* | toolchain-base )
			DESL_ARCH="${BASE_ARCH}";
			DESL_ARCH_BUILD="${BASE_ARCH_BUILD}";

			BUILD_DIR="${BUILD_ROOT_DIR}/builder-${BUILDER_ARCH}/base-${BASE_ARCH}";
			DLP_DIR="${DLP_BASEARCH_DIR}";

			TOOLCHAIN_DIR="${TOOLCHAIN_BASEARCH_DIR}";
			TOOLCHAIN_USER_BASE_DIR="${TOOLCHAIN_DIR}";
			TOOLCHAIN_USR_DIR="${TOOLCHAIN_USER_BASE_DIR}";
			TOOLCHAIN_LOCAL_DIR="${TOOLCHAIN_USER_BASE_DIR}";
			TOOLCHAIN_TOOLS_DIR="${TOOLCHAIN_DIR}";

			INTERNAL_NO_LINK_USR_DIR=1;
		;;
	esac

	return 0;
}

ChangeEnvIfPackageIsToolchain(){

	case "${DESL_BUILD_PACKAGE}" in
		toolchain/* | toolchain )
			BUILD_DIR="${BUILD_ROOT_DIR}/builder-${BUILDER_ARCH}/desl-${DESL_ARCH}";
			DLP_DIR="${DLP_TOOLCHAIN_DIR}";

			INTERNAL_NO_LINK_USR_DIR=1;
		;;
	esac

	return 0;
}

AddPATH(){
	local x
	for x in "${@}"; do
		PATH="${x}/sbin:${x}/bin:${PATH}";
	done
}

CheckPrerequisites(){
	[ "${DESLB_SKIP_PREREQ:-0}" = '1' ] && return 0;
	export DESLB_SKIP_PREREQ=1;

	. ${INCLUDES_DIR}/CheckPrerequisites.sh
	RunCheckPrerequisites || {
		local R=${?};

		case "${R}" in
			250 | 251 ) return ${R};; # 251: require to disable FSV
		esac

		error "Failed to solve prerequisites"
		return ${R};
	}

	case "${DESLB_RUN_WITHOUT_FSV:-0}:${PACKAGE_ROOT_CATEGORY}" in
		1:bootstrap );;
		1:* )
			error "Only bootstrap allowed without FSV: $DESL_BUILD_PACKAGE"
			return 1;;
	esac

	return 0;
}

RunMode(){
	case "${ARGS_TARGET_EX}" in

		# Standard options
		'Build' | '' ) # Prepare,Config,Compile,Install
			RunDESLBuilder "${@}" /M:/Prepare	|| return ${?};
			RunDESLBuilder "${@}" /M:/Config	|| return ${?};
			RunDESLBuilder "${@}" /M:/Compile	|| return ${?};
			RunDESLBuilder "${@}" /M:/Install	|| return ${?};
		;;

		'Rebuild' ) # Clean, Build
			[ ! "${ARGS_OPT_LONG_Full}" = '' ] && { # /Full: Remove, Build
				RunDESLBuilder "${@}" /M:/Remove	|| return ${?};
				RunDESLBuilder "${@}" /M:/Build	|| return ${?};
			}

			RunDESLBuilder "${@}" /M:/Clean	|| return ${?};
			RunDESLBuilder "${@}" /M:/Build	|| return ${?};
		;;

		'Platform' )
			. ${INCLUDES_DIR}/PlatformManager.sh
			DESLBAM;
			return ${?};;


		# Advanced options
		'Prepare' ) # Download, Extract
			DESLB_NESTLV=$((DESLB_NESTLV-1));
			RunDESLBuilder "${@}" /M:/Download	|| return ${?};
			RunDESLBuilder "${@}" /M:/Extract	|| return ${?};
		;;

		'Config' ) # has sub menu: Menu (menuconfig), Default (defconfig)
			CheckPrerequisites || return ${?};

			[ ! "${ARGS_OPT_LONG_Menu}" = '' ] && {
				BuilderConfig 'menuconfig'
				return ${?};
			}
			[ ! "${ARGS_OPT_LONG_Default}" = '' ] && {
				BuilderConfig 'defconfig'
				return ${?};
			}
			BuilderConfig '' || return ${?};
		;;

		'Reconfig' | 'ReConfig' )
			CheckPrerequisites || return ${?};

			BuilderConfig 'force' || return ${?};
		;;

		'Compile' )
			CheckPrerequisites || return ${?};
			BuilderCompile || return ${?};
			;;

		'Install' )
			CheckPrerequisites || return ${?};
			BuilderInstall || return ${?};
			;;



		# Diagnostic options
		'Uninstall' )
			BuilderUninstall || return ${?};
			;;

		'Download' )
			BuilderDownload || return ${?};
			;;

		'Extract' )
			BuilderExtract || return ${?};
			;;


		'Clean' ) # has sub menu: Full ( = /Reset)
			[ ! "${ARGS_OPT_LONG_Full}" = '' ] && {
				RunDESLBuilder "${@}" /M:/Reset
				return ${?};
			}
			BuilderClean;
		;;

		'Reset' )
			;;

		'Remove' )
			BuilderRemove || return ${?};
			;;

		# Other options
		'help' )
			return ${?};;

		# Developer options
		'DLP' | 'PackageManager' )
			. ${INCLUDES_DIR}/DevTools_PackageManger.sh
			DESLBPM;
			return ${?};;

		'ShowExports' )
			. ${INCLUDES_DIR}/DevTools_DESLBExports.sh
			ShowExports;
			return ${?};;

		'GetPackageInfo' )
			. ${INCLUDES_DIR}/DESLBPackageReader.sh
			PackageGetInfo;
			return ${?};;

		'Shell' )
			[ ! "${ARGS_OPT_LONG_DisableFSV}" = '' ] && {
				[ "${DESLB_RUN_WITHOUT_FSV:-0}" = '0' ] && return 250;
			} || {
				# Setup dlpi env
				ln -s "${SCRIPTS_DIR}/dlpi" /bin/dlpi
				ln -s "${SCRIPTS_DIR}/dlpm" /bin/dlpm
				mount -t tmpfs usr://DESLBuilder/Shell /usr
				RunDLPI /Initialize /Root:/usr /Platform:${BUILDER_ARCH}
				DLP_DIR="${DLP_BUILDER_DIR}";
			}
			infoex 'Entering DESLBuilder shell'
			cd "${ROOT_DIR}"
			"${CORETOOLS_DIR}/sh"
			return 0;;

		* )
			error "Unknown mode '${ARGS_TARGET_EX}' specified."
			warning 'You must specify the mode option in the first argument.'
			return 127;
			;;

	esac

return 0;
};
